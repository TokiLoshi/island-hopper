// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// */

import React, { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three'
import { useSpring, animated } from '@react-spring/three'
export function Boombox({ ...props }) {
  const { nodes, materials } = useGLTF('/models/Boombox.glb')

  const [introAudio, setIntroAudio] = useState(null)
  const boomRef = useRef()
  const outlineRef = useRef()
  const [isPlaying, setIsPlaying] = useState(false)
  const [isHovering, setIsHovering] = useState(false)

  useFrame(() => {
    if (outlineRef.current) {
      outlineRef.current.material.opacity = THREE.MathUtils.lerp(
        outlineRef.current.material.opacity,
        isHovering || isPlaying ? 0.75 : 0.15,
        0.1,
      )
    }
  })

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const audio = new Audio('/voiceover.wav')
      audio.preload = 'auto'
      setIntroAudio(audio)
      const handleEnded = () => setIsPlaying(false)
      audio.addEventListener('ended', handleEnded)

      return () => {
        audio.pause()
        audio.removeEventListener('ended', handleEnded)
      }
    }
  }, [])

  const handleBoomboxClick = (event) => {
    event.stopPropagation()
    if (!introAudio) {
      return
    }
    if (isPlaying) {
      introAudio.pause()

      setIsPlaying(false)
    } else {
      introAudio.play().catch((error) => {
        // eslint-disable-next-line no-console
        console.log(`Error playing boombox: ${error}`)
        setIsPlaying(false)
      })
      setIsPlaying(true)
    }
  }

  const boomScale = props.scale || 0.6
  const outlineScale = 0.63

  const { pulse } = useSpring({
    from: boomScale,
    to: isPlaying ? [{ pulse: boomScale * 1.07 }, { pulse: boomScale }] : boomScale,
    config: {
      mass: 20,
      tension: 300,
      friction: 20,
    },
    loop: isPlaying === true ? true : false,
  })

  const { outlinePulse } = useSpring({
    from: outlineScale,
    to: isPlaying ? [{ outlinePulse: outlineScale * 1.07 }, { outlinePulse: outlineScale }] : outlineScale,
    config: {
      mass: 20,
      tension: 300,
      friction: 20,
    },
    loop: isPlaying === true ? true : false,
  })

  return (
    <group
      {...props}
      dispose={null}
      onClick={handleBoomboxClick}
      onPointerOver={() => setIsHovering(true)}
      onPointerOut={() => setIsHovering(false)}
      ref={boomRef}
    >
      <animated.mesh
        castShadow
        receiveShadow
        geometry={nodes.Boombox_mesh.geometry}
        material={materials.Boombox_mat}
        scale={isPlaying ? pulse : boomScale}
      />
      <animated.mesh
        ref={outlineRef}
        geometry={nodes.Boombox_mesh.geometry}
        scale={isPlaying ? outlinePulse : outlineScale}
      >
        <meshBasicMaterial color='#fefef1' transparent opacity={0.2} side={THREE.BackSide} toneMapped={false} />
      </animated.mesh>
    </group>
  )
}
Boombox.displayName = 'Boombox'
useGLTF.preload('/models/Boombox.glb')
