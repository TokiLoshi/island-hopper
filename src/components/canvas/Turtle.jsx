/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { animated, useSpring } from '@react-spring/three'

export function Turtle({ initialPosition = [1.12, -0.5, 0], initialRotation = [0, -1.1, 0], ...props }) {
  const { nodes, materials } = useGLTF('/models/Turtle.glb')
  const [isJumping, setIsJumping] = useState(false)

  const rotationSpring = useSpring({
    from: {
      rotX: initialRotation[0],
      rotY: initialRotation[1],
      rotZ: initialRotation[2],
    },
    to: [
      {
        rotX: Math.sin(initialPosition[0] * 0.001),
        rotY: Math.sin(initialPosition[1] * 0.008),
        delay: 200,
      },
      {
        rotX: -Math.sin(initialPosition[0] * 0.005),
        rotY: -Math.sin(initialPosition[1] * 0.001),

        delay: 200,
      },
      {
        rotX: initialRotation[0],
        rotY: initialRotation[1],
        rotZ: initialRotation[2],
        delay: 200,
      },
    ],
    config: {
      mass: 100,
      tension: 300,
      friction: 180,
    },
    loop: true,
    immediate: true,
  })

  const positionSpring = useSpring({
    posY: isJumping ? initialPosition[1] + 1 : initialPosition[1],
    config: {
      mass: 1,
      tension: 180,
      friction: 12,
    },
    onRest: () => {
      if (isJumping) setIsJumping(false)
    },
  })

  const handleClick = (event) => {
    event.stopPropagation()
    // eslint-disable-next-line no-console
    console.log('Clicked')
    setIsJumping(true)
  }

  return (
    <>
      <animated.group
        {...props}
        dispose={null}
        position-x={initialPosition[0]}
        position-y={positionSpring.posY}
        position-z={initialPosition[2]}
        rotation-x={rotationSpring.rotX}
        rotation-y={rotationSpring.rotY}
        rotation-z={rotationSpring.rotZ}
        onClick={handleClick}
      >
        <mesh castShadow receiveShadow geometry={nodes['Node-Mesh_1'].geometry} material={materials.lambert3SG} />

        <mesh castShadow receiveShadow geometry={nodes['Node-Mesh'].geometry} material={materials.lambert5SG} />
        <mesh castShadow receiveShadow geometry={nodes['Node-Mesh_2'].geometry} material={materials.lambert4SG} />

        <mesh castShadow receiveShadow geometry={nodes['Node-Mesh_3'].geometry} material={materials.lambert6SG} />
        <mesh castShadow receiveShadow geometry={nodes['Node-Mesh_4'].geometry} material={materials.lambert2SG} />

        <mesh castShadow receiveShadow geometry={nodes['Node-Mesh_5'].geometry} material={materials.lambert7SG} />
      </animated.group>
    </>
  )
}

Turtle.displayName = 'Turtle'
useGLTF.preload('/models/Turtle.glb')
