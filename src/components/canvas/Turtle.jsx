/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { animated, useSpring } from '@react-spring/three'

export function Turtle({ initialPosition = [1.12, -0.5, 0], initialRotation = [0, -1.1, 0], ...props }) {
  const { nodes, materials } = useGLTF('/models/Turtle.glb')

  const { x, y } = useSpring({
    from: {
      x: initialRotation[0],
      y: initialRotation[1],
      z: initialRotation[2],
    },
    to: [
      {
        x: Math.sin(initialPosition[0] * 0.001),
        y: Math.sin(initialPosition[1] * 0.008),

        delay: 200,
      },
      {
        x: -Math.sin(initialPosition[0] * 0.005),
        y: -Math.sin(initialPosition[1] * 0.001),

        delay: 200,
      },
      {
        x: initialRotation[0],
        y: initialRotation[1],
        z: initialRotation[2],
        delay: 200,
      },
    ],
    config: {
      mass: 100,
      tension: 300,
      friction: 180,
    },
    loop: true,
    immediate: true,
  })

  return (
    <>
      <animated.group {...props} dispose={null} position={initialPosition} rotation-x={x} rotation-y={y}>
        <mesh castShadow receiveShadow geometry={nodes['Node-Mesh_1'].geometry} material={materials.lambert3SG} />

        <mesh castShadow receiveShadow geometry={nodes['Node-Mesh'].geometry} material={materials.lambert5SG} />
        <mesh castShadow receiveShadow geometry={nodes['Node-Mesh_2'].geometry} material={materials.lambert4SG} />

        <mesh castShadow receiveShadow geometry={nodes['Node-Mesh_3'].geometry} material={materials.lambert6SG} />
        <mesh castShadow receiveShadow geometry={nodes['Node-Mesh_4'].geometry} material={materials.lambert2SG} />

        <mesh castShadow receiveShadow geometry={nodes['Node-Mesh_5'].geometry} material={materials.lambert7SG} />
      </animated.group>
    </>
  )
}

Turtle.displayName = 'Turtle'
useGLTF.preload('/models/Turtle.glb')
