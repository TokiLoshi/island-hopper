/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import * as THREE from 'three'

const komodoMainBody = '#5d8744'
const komodoBelly = '#70705A'
const komodoClaws = '#202020'

const ACTION_MAP = {
  attack: 'DragonArmature|Dragon_Attack',
  attack2: 'DragonArmature|Dragon_Attack2',
  flying: 'DragonArmature|Dragon_Flying',
  death: 'DragonArmature|Dragon_Death',
  hit: 'DragonArmature|Dragon_Hit',
}

const IDLE_ANIMATION_KEY = 'flying'
const TRANSITION_DURATION = 0.1

export function Dragon({ currentAnimation = IDLE_ANIMATION_KEY, ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/models/Dragon.glb')
  const { actions } = useAnimations(animations, group)

  const currentActionRef = useRef(null)
  const timeoutRef = useRef(null)

  const [isClicked, setIsClicked] = useState(false)

  useEffect(() => {
    if (!actions || Object.keys(actions).length === 0) return

    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current)
    }

    const playIdleAnimation = () => {
      const idleAnimationName = ACTION_MAP[IDLE_ANIMATION_KEY]
      if (!idleAnimationName || !actions[idleAnimationName]) {
        // eslint-disable-next-line no-console
        console.warn(`No animation fournd for ${idleAnimationName}`)
        return
      }

      const idleAction = actions[idleAnimationName]

      if (currentActionRef.current) {
        currentActionRef.current.fadeOut(TRANSITION_DURATION)
      }
      idleAction.reset().setLoop(THREE.LoopRepeat, Infinity).fadeIn(TRANSITION_DURATION)

      currentActionRef.current = idleAction
    }

    const playRequestedAnimation = (animationKey) => {
      if (animationKey === IDLE_ANIMATION_KEY && currentActionRef.current) return

      const fullAnimationName = ACTION_MAP[animationKey]
      if (!fullAnimationName) {
        // eslint-disable-next-line no-console
        console.warn(`No animation name for ${fullAnimationName}`)
        return
      }
      const targetAction = actions[fullAnimationName]
      if (currentActionRef.current) {
        currentActionRef.current.fadeOut(TRANSITION_DURATION)
      }

      if (animationKey === IDLE_ANIMATION_KEY) {
        targetAction.reset().setLoop(THREE.LoopRepeat, Infinity).fadeIn(TRANSITION_DURATION).play()
      } else {
        targetAction.reset().setLoop(THREE.LoopRepeat, 1).fadeIn(TRANSITION_DURATION).play()

        const duration = targetAction.getClip().duration * 500
        timeoutRef.current = setTimeout(
          () => {
            playIdleAnimation()
          },
          duration + TRANSITION_DURATION * 1000,
        )
      }
      currentActionRef.current = targetAction
    }

    playRequestedAnimation(currentAnimation)
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current)
      }
    }
  }, [currentAnimation, actions])

  const handleClick = (event) => {
    event.stopPropagation()
    // eslint-disable-next-line no-console
    console.log('Dragon clicked')

    setIsClicked(true)
    // if current animation fade out
    if (currentActionRef.current) {
      currentActionRef.current.fadeOut(TRANSITION_DURATION)
    }
    const actionName = ACTION_MAP['attack2']
    const actionToPlay = actions[actionName]
    actionToPlay.reset().setLoop(THREE.LoopRepeat, 1).fadeIn(TRANSITION_DURATION).play()

    const duration = actionToPlay.getClip().duration * 500

    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current)
    }

    timeoutRef.current = setTimeout(
      () => {
        const idleAnimation = ACTION_MAP[IDLE_ANIMATION_KEY]
        const idleAction = actions[idleAnimation]
        if (currentActionRef.current) {
          currentActionRef.current.fadeOut(TRANSITION_DURATION)
        }
        idleAction.reset().setLoop(THREE.LoopRepeat, Infinity).fadeIn(TRANSITION_DURATION).play()
        currentActionRef.current = idleAction
        setIsClicked(false)
      },
      duration + TRANSITION_DURATION * 1000,
    )
    currentActionRef.current = actionToPlay
  }
  return (
    <group ref={group} {...props} dispose={null} onClick={handleClick}>
      <group name='Root_Scene'>
        <group name='RootNode'>
          <group name='DragonArmature' rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <primitive object={nodes.Root} />
          </group>
          <group name='Dragon' position={[0, 1.584, -0.219]} rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name='Dragon_1'
              geometry={nodes.Dragon_1.geometry}
              // material={materials.Main}

              skeleton={nodes.Dragon_1.skeleton}
            >
              <meshStandardMaterial {...materials.Main} color={komodoMainBody} />
            </skinnedMesh>
            <skinnedMesh
              name='Dragon_2'
              geometry={nodes.Dragon_2.geometry}
              material={materials.Belly}
              skeleton={nodes.Dragon_2.skeleton}
            />
            <skinnedMesh
              name='Dragon_3'
              geometry={nodes.Dragon_3.geometry}
              material={materials.Claws}
              skeleton={nodes.Dragon_3.skeleton}
            />
            <skinnedMesh
              name='Dragon_4'
              geometry={nodes.Dragon_4.geometry}
              material={materials.Wings}
              skeleton={nodes.Dragon_4.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  )
}

Dragon.displayName = 'Dragon'
useGLTF.preload('/models/Dragon.glb')
